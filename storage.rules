rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Backup dosyaları için kurallar
    match /backups/{companyId}/{fileName} {
      allow read: if request.auth != null && 
        (request.auth.token.companyId == companyId || 
         request.auth.token.rol == 'superadmin');
      allow write: if request.auth != null && 
        (request.auth.token.companyId == companyId || 
         request.auth.token.rol == 'superadmin') &&
        request.auth.token.rol in ['yonetici', 'superadmin'];
      allow delete: if request.auth != null && 
        request.auth.token.rol in ['yonetici', 'superadmin'];
    }
    // Yardımcı: Şirket, plan ve depolama limitlerini oku
    function getCompany(companyId) {
      return firestore.get(/databases/(default)/documents/companies/$(companyId)).data;
    }
    function getStorageUsedMB(companyId) {
      let c = getCompany(companyId);
      return c != null && c.metrics != null && c.metrics.storageUsedMB != null ? c.metrics.storageUsedMB : 0;
    }
    function getPlanStorageLimitMB(plan) {
      // Varsayılan plan-limit eşlemesi (SAAS_CONFIG/remote ile uyumlu tutulmalı)
      return plan == 'enterprise' ? 500 * 1024 :
             plan == 'professional' ? 50 * 1024 :
             plan == 'starter' ? 512 : // 0.5 GB
             500; // trial veya bilinmeyen için 500MB
    }
    function getStorageLimitMB(companyId) {
      let c = getCompany(companyId);
      // Null check: Eğer company yoksa, varsayılan trial limit dön
      return c == null ? 500 
        : (c.subscriptionLimits != null && c.subscriptionLimits.storageLimit != null) 
          ? c.subscriptionLimits.storageLimit
          : (c.subscriptionPlan != null ? getPlanStorageLimitMB(c.subscriptionPlan) : 500);
    }
    function normalizeCompanyId(id) {
      return (id + '').replace('company_', '');
    }
    function canUpload(companyId, sizeBytes) {
      // request.resource null ise (delete) true döndür
      let used = getStorageUsedMB(companyId);
      let limit = getStorageLimitMB(companyId);
      let uploadSizeMB = sizeBytes / (1024 * 1024);
      return request.resource == null || limit == 0 || (used + uploadSizeMB) <= limit;
    }
    
    // Envanter fotoğrafları ve belgeleri
    match /companies/{companyId}/envanter/{envanterId}/photos/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 10 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
    }
    match /companies/{companyId}/envanter/{envanterId}/docs/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.size < 50 * 1024 * 1024 && canUpload(companyId, request.resource.size) && (
            request.resource.contentType in [
              'application/pdf',
              'application/msword',
              'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
              'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
              'application/vnd.ms-excel',
              'text/csv',
              'text/plain',
              'image/jpeg',
              'image/png'
            ]
          ))
        );
    }

    // Şirket logoları - Şirket adminleri yükleyebilir
    match /companies/{companyId}/logo/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 5 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
    }
    
    // Arıza fotoğrafları - Eski yol (uygulamada kullanılmıyor olabilir)
    match /faults/{companyId}/{faultId}/{fileName} {
      allow read: if request.auth != null && belongsToCompany(companyId);
      allow write: if request.auth != null && belongsToCompany(companyId) && isValidImageFile() && request.resource.size < 10 * 1024 * 1024;
    }
    // Arıza fotoğrafları - Yeni yol companies/company_*/arizalar/{faultId}/photos/{fileName}
    match /companies/{companyId}/arizalar/{faultId}/photos/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 10 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
    }
    
    // Bakım fotoğrafları - Şirket üyeleri yükleyebilir
    match /maintenance/{companyId}/{maintenanceId}/{fileName} {
      allow read: if request.auth != null && 
        belongsToCompany(companyId);
      allow write: if request.auth != null && 
        belongsToCompany(companyId) &&
        isValidImageFile() &&
        request.resource.size < 10 * 1024 * 1024 &&
        canUpload(companyId, request.resource.size); // 10MB ve depolama limiti
    }
    
    // Santral fotoğrafları - CompanyId prefix kontrolü ile
    match /companies/{companyId}/santraller/{santralId}/photos/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 10 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
    }
    
    // Santral logo dosyaları - Direkt santral ID altında
    match /companies/{companyId}/santraller/{santralId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 10 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
    }
    
    // Rapor dosyaları - Şirket üyeleri okuyabilir, yetkili oluşturabilir
    match /reports/{companyId}/{reportId}/{fileName} {
      allow read: if request.auth != null && 
        belongsToCompany(companyId);
      allow write: if request.auth != null && 
        belongsToCompany(companyId) &&
        isAuthorizedForReports() &&
        isValidReportFile() &&
        request.resource.size < 50 * 1024 * 1024 &&
        canUpload(companyId, request.resource.size); // 50MB ve depolama limiti
    }
    
    // Kullanıcı profil fotoğrafları - Kendi fotoğrafını yükleyebilir
    match /users/{userId}/profile/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidImageFile() &&
        request.resource.size < 2 * 1024 * 1024; // Profil foto: global limit haricinde
    }
    
    // Profil fotoğrafları - Yeni path format
    match /profile-photos/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 5 * 1024 * 1024)
        );
      allow delete: if request.auth != null;
    }
    
    // Şirket bazlı profil fotoğrafları - Her kullanıcı kendi fotoğrafını yükleyebilir
    match /companies/{companyId}/profile-photos/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 5 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
      allow delete: if request.auth != null;
    }
    
    // Dokümanlar - Şirket üyeleri okuyabilir, yetkili yükleyebilir
    match /documents/{companyId}/{docType}/{fileName} {
      allow read: if request.auth != null && 
        belongsToCompany(companyId);
      allow write: if request.auth != null && 
        belongsToCompany(companyId) &&
        isAuthorizedForDocuments() &&
        isValidDocumentFile() &&
        request.resource.size < 100 * 1024 * 1024 &&
        canUpload(companyId, request.resource.size); // 100MB ve depolama limiti
    }
    
    // Bakım fotoğrafları için özel kurallar - Yeni path format
    match /companies/{companyId}/bakimlar/{bakimId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 10 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
    }
    
    // Stok fotoğrafları için kurallar
    match /companies/{companyId}/stoklar/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 10 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
    }
    
    // Vardiya fotoğrafları için kurallar
    match /companies/{companyId}/vardiya/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 10 * 1024 * 1024 && canUpload(companyId, request.resource.size))
        );
    }

    // Depolama hesaplama için klasör listeleme izinleri
    match /companies/{companyId}/{folder=**} {
      allow list: if request.auth != null &&
        (getUserCompanyId() == companyId ||
         getUserCompanyId() == companyId.replace('company_', '') ||
         ('company_' + getUserCompanyId()) == companyId ||
         getUserRole() == 'superadmin');
    }
    
    // Genel klasör okuma izinleri (logos, documents vb.)
    match /companies/{companyId}/logos/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          (request.resource.contentType.matches('image/.*') && request.resource.size < 5 * 1024 * 1024)
        );
    }
    
    match /companies/{companyId}/documents/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (
          request.resource == null ||
          request.resource.size < 50 * 1024 * 1024
        );
    }
    
    // Yardımcı fonksiyonlar
    function belongsToCompany(companyId) {
      return getUserCompanyId() == companyId;
    }
    
    function getUserCompanyId() {
      return firestore.get(/databases/(default)/documents/kullanicilar/$(request.auth.uid)).data.companyId;
    }
    
    function getSafeUserCompanyId() {
      let userDoc = firestore.get(/databases/(default)/documents/kullanicilar/$(request.auth.uid));
      return userDoc != null && userDoc.data != null ? userDoc.data.companyId : '';
    }
    
    function getUserRole() {
      return firestore.get(/databases/(default)/documents/kullanicilar/$(request.auth.uid)).data.rol;
    }
    
    function isCompanyAdmin(companyId) {
      return belongsToCompany(companyId) && 
        getUserRole() in ['superadmin', 'yonetici'];
    }
    
    function isAuthorizedForReports() {
      return getUserRole() in ['superadmin', 'yonetici', 'muhendis'];
    }
    
    function isAuthorizedForDocuments() {
      return getUserRole() in ['superadmin', 'yonetici', 'muhendis', 'tekniker'];
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.contentType in ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    }
    
    function isValidReportFile() {
      return request.resource.contentType in [
        'application/pdf',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'text/csv'
      ];
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType in [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'text/csv',
        'text/plain',
        'image/jpeg',
        'image/png'
      ];
    }
  }
}